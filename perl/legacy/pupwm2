#!/usr/bin/perl
use strict;
use diagnostics;
use Getopt::Long;

my $version = '0.7b 20130110';

## pupwm
##
## DESCRIPTION
##
## Quantifies number of reads for windows of user-defined half-width and step from a pileup.
## Also computes the GC% and amount of non-N letters in the window.
## Maybe also some statistical values like the local variance, number of outliers, etc... ?
##
## TESTED VERSIONS
##
## 20121120	Tested v0.6b, in monothreaded mode on a composite 35Mb pileup, without bugs.
## 20121120	Tested v0.6b, on toucan with 24 threads on YT1 whole genome pileup, with hw=10
##		and s=10. It took 2h27 !
## 20121115	Tested v0.5b, on YT1 whome genome pileup, with hw=12 and s=25, monothreaded, on
##		my local machine (Xeon X5660 @ 2.8GHz) : took ~ 16 hours.
##
## VERSION NOTES
##
## 0.7	20130107
##	. Added a '--chruse' option that overrides the pileup split. Requires splitted chr to be present.
##
## 0.6c 20121120
##	. Optimized splitting of pileup when in multithreaded mode (~30% faster) : replaced splitting
##	  by a better regex handling.
##	. Now script does not write a mini-pileup for non-canonical chromosomes when --nc is inactive.
##
## 0.6b	20121119
##	. Changed multithreading (threads module) to forking (Parallel::Forkmanager). This allows an
##	  easy, automated gestion of queue.
##	. Consequently, added splitting if the input pileup to several files (one per chr).
##	. Added an option '-k' to keep such temp files.
##	. Reverted to the possibility of having only one possible averaging method at a time (set
##	  'triangular' as default, strongly recommended to stick with it).
##
## 0.6	20121115
##	. First attempt to add multithreading.
##
## 0.5b	20121115
##	. Corrected a bug where --nc was working incorrectly.
##
## 0.5	20121114
##	. Added an option to discard non-canonical chromosomes, based on the chrom2chr hash (active by default)
##	. Added an option to discard chrX.
##	. Added help.
##
## 0.4	20121109
##	. "Frameshift" bug resolved.
##	. Changed options so that both triangular and rectangular smoothing can be performed simultaneously by default in a single run.
##
## 0.3	20121105
##	. Advanced a bit in the bug that makes the script hang early on certain window/step sizes. Still not perfect though...
##
## 0.2	20121030
##	. Rewrote from scratch. Works most of the time, handling triangular and rectangular windows, steps
##	  and windows. Still requires debugging (sometimes stops too early, frameshift ??), and optim.
##	. Added support for species to add ChrN in the output table (too long and hard to handle this
##	  conversion in R).
##
## 0.1	20121025
##	. Just started coding. Plan is to make this version compatible with pileup format only, taking care
##	  of half-width and step, and coding a triangular averaging.



## Handling options :
##	-i	string	ASCII	pileup filename
##	--hw	+int	>0	half-window size
##	-s	+int	>1	step
##	-o	string	ASCII	output root filename
##	--sp	string	hs|mm	species
##	-m	string	tri|rec	averaging method
##	--nt	+int	>0	number of threads
##	--noX	flag		discard chrX
##	--noY	flag		discard chrY
##	--nc	flag		allow non-canonical chromosomes

## Setting output writing to direct mode :
$|++;

## Default options :
my %opts = ('hw' => 12, 's' => 25, 'sp' => 'hs', 'nt' => 1, 'm' => 'tri');

## Help :
if (scalar(@ARGV) == 0) {
	print '
pupwm v'.$version.'
 for Pileup Window Maker.

DESCRIPTION
 This script performs the reduction of number of reads counts from a pileup
 input file, averging them using triangular or rectangular windows which
 width and steps are user-given. User can also remove chrX and/or chrY, as
 well as tolerate non-canonical chromosomes (ex : chrM).

USAGE EXAMPLE:
 ./pupwm [OPTION] ...

REQUIRED OPTIONS :
	OPTION	TYPE	DEFAULT	DESCRIPTION
	-i	String		Set input pileup
	--hw	Int>0	'.$opts{'hw'}.'	Half-window
	-s	Int>1	'.$opts{'s'}.'	Step
	--nt	Int>0	'.$opts{'nt'}.'	Number of threads to use
	--sp	hs|mm	'.$opts{'sp'}.'	Species (homo sapiens | mus musculus)
	-m	tri|rec	'.$opts{'m'}.'	Averaging method
	
FACULTATIVE OPTIONS :
	OPTION		TYPE	DEFAULT		DESCRIPTION
	-o		String	Same as -i	Output rootname (by default : same as input)
	-k		Flag	F		Keep temporary files (pileups by chr)
	--chruse	Flag	F		Use already generated split chr datafiles
	--noX		Flag	F		Discard information for chrX
	--noY		Flag	F		Discard information for chrY
	--nc		Flag	F		Keep non-canonical chromosomes information.

EXAMPLES :
 ./pupwm -i myinput.pileup -o myoutput --hw 50 -s 25 -m tri --sp hs --nt 4 --noX --noY --nc


NOTA 1 :
 "Non-canonical chromosomes" are any string not in the range of chr1..chrY (by
 example, "chrM" or "chr6_random").

NOTA 2 :
 Multithreaded mode (--nt > 1) requires the Parallel::ForkManager perl module.

';
	exit;
}

## Get options values back :
my %smotrad = ('tri' => 't', 'rec' => 'r');
GetOptions(\%opts, 'i=s', 'hw=i', 's=i', 'o=s', 'sp=s', 'm=s', 'noX!', 'noY!', 'nc!', 'nt=i', 'k!', 'chruse!');
if (!$opts{'o'}) { $opts{'o'} = $opts{'i'}; }
$opts{'o'} .= '.'.join('', 'hw', $opts{'hw'}, 's', $opts{'s'}, $smotrad{$opts{'m'}});

# my $ofile = $opts{'o'};
# $ofile =~ s/\.pileup$//i;
# $ofile .= '.'.join('', 'hw', $opts{'hw'}, 's', $opts{'s'}, $smotrad{$opts{'m'}});

print "\nInput file :\t".$opts{'i'}."\nHalf-window :\t".$opts{'hw'}."\nStep :\t\t".$opts{'s'};
if ($opts{'sp'} eq 'hs') { print "\nWorking on homo sapiens."; }
elsif ($opts{'sp'} eq 'mm') { print "\nWorking on mus musculus."; }
else { print "\n".' "'.$opts{'sp'}.'" : Species not supported / recognized!'."\n"; exit; }
if ($opts{'m'} eq 'tri') { print "\nTriangular smoothing output requested."; }
elsif ($opts{'m'} eq 'rec') { print "\nRectangular smoothing output requested."; }
else { print "\n".' "'.$opts{'m'}.'" : averging method not supported / recognized!'."\n"; exit; }
if ($opts{'noX'}) { print "\nChrX will be discarded."; }
if ($opts{'noY'}) { print "\nChrY will be discarded."; }
if (!$opts{'nc'}) { print "\nNon-canonical chromosomes will be discarded (ChrM, randoms, etc...)."; } elsif($opts{'nt'} == 1) { print "\nWARNING : Any string in the Chr field will be kept."; }
if ($opts{'chruse'}) { print "\nUsing already generated split files from the source pileup."; $opts{'k'} = 1; }
if ($opts{'k'}) { print "\nTemporary chromosomal pileups will be kept."; }
print "\n".'Running with '.$opts{'nt'}.' threads.'."\n";

my $pupnam = (split(/\//, $opts{'i'}))[-1];
# print "\n".$pupnam."\n";

## Checking output types
# if ( ($opts{'notri'}) and ($opts{'norec'}) ) {
# 	print "\nSTOPPED : Neither triangular nor rectangular smoothing requested!\n";
# 	exit;
# }


## Building weights for the triangular averageing, on a basis of a 2x weight for the center.
my $wwidth = 2*$opts{'hw'}+1;
my $wmax = 2;
my @weights=();
foreach my $x (0..(2*$opts{'hw'})) {
	my $wei = ($wmax-(($wmax/($opts{'hw'}+1))*abs($opts{'hw'}-$x)));
	push @weights, $wei;
}


################### START : REWRITE with handling of true step
my $lc = 0;		## Line counter (counts the number of parsed lines from the input source (incremental)
my $ntf=0;		## Former nucleotide position (incremental to detect gaps)
my $chrf='';		## Former chromosome (to detect chr changes)
my $nextstep=0;		## Position of the next reached step
my @vkeys = qw{chrA pos base count};
my %vstor = ();		## Storage object for vertical input data (temporal, somehow transposed object of the input)

## USEFULL HASHES
my %chrorder = (	'hs' => [ 'chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY' ],
			'mm' => [ 'chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chrX', 'chrY' ] );

my %chrom2chr = (	'hs' => { 'chr1' => 1, 'chr2' => 2, 'chr3' => 3, 'chr4' => 4, 'chr5' => 5, 'chr6' => 6, 'chr7' => 7, 'chr8' => 8, 'chr9' => 9, 'chr10' => 10, 'chr11' => 11, 'chr12' => 12, 'chr13' => 13, 'chr14' => 14, 'chr15' => 15, 'chr16' => 16, 'chr17' => 17, 'chr18' => 18, 'chr19' => 19, 'chr20' => 20, 'chr21' => 21, 'chr22' => 22, 'chrX' => 23, 'chrY' => 24 },
			'mm' => { 'chr1' => 1, 'chr2' => 2, 'chr3' => 3, 'chr4' => 4, 'chr5' => 5, 'chr6' => 6, 'chr7' => 7, 'chr8' => 8, 'chr9' => 9, 'chr10' => 10, 'chr11' => 11, 'chr12' => 12, 'chr13' => 13, 'chr14' => 14, 'chr15' => 15, 'chr16' => 16, 'chr17' => 17, 'chr18' => 18, 'chr19' => 19, 'chrX' => 20, 'chrY' => 21 });

my %chr2chrom = ();
foreach my $k (keys(%chrom2chr)) {
	foreach my $c (keys(%{$chrom2chr{$k}})) {
		$chr2chrom{$k}{$c} = $c;
	}
}

## SUBS
## Load current line into vstor
sub vload {
	my @vt = @_;
 	foreach my $v (0..$#vkeys) { push @{$vstor{$vkeys[$v]}}, $vt[$v]; }
	if (scalar(@{$vstor{'pos'}}) == 2*$opts{'hw'}+1) {
# 		if ($ntf == $nextstep+$opts{'hw'}) { &stepwise(\%vstor); }
		&stepwise(\%vstor) if ($ntf == $nextstep+$opts{'hw'}); 
		&vshift(\%vstor);
	}
}

## Shift vector if needed;
sub vshift {
	my %vt = %{shift()};
	foreach my $v (0..$#vkeys) { shift @{$vstor{$vkeys[$v]}}; }
}

## Performs everything needed if step is reached;
sub stepwise {
	my %vt = %{shift()};
	my $ravg = '';
	my $tavg = '';
	my $start = ${$vt{'pos'}}[0];
	my $end = ${$vt{'pos'}}[$#{$vt{'pos'}}];
	my ($gccount, $bcount, $gcrate) = (0, 0, 0);
	my $gcword = join('', @{$vt{'base'}});
	$gccount++ while $gcword =~ /[CG]/gi;
 	$bcount++ while $gcword =~ /[CGAT]/gi;
#  	if ($bcount == 0) { $gcrate = 0; } else { $gcrate = sprintf("%.2f", $gccount/$bcount); }
 	if ($bcount == 0) { $gcrate = 0; } else { $gcrate = $gccount/$bcount }
	if ($opts{'m'} eq 'tri') { $tavg = sprintf("%.2f", &tri_avg( [ @{$vt{'count'}} ], [ @weights ] )); } elsif ($opts{'m'} eq 'rec') { $ravg =  &rec_avg( @{$vt{'count'}} ); }
	print OUT join("\t", $chrf, $chrom2chr{$opts{'sp'}}{$chrf}, $start, $end, $nextstep, $tavg, $gccount, $bcount, $gcrate)."\n";
	$nextstep += $opts{'s'};
}
## Triangular averaging
sub tri_avg {
	my @recup = @_;
	my @valz = @{$recup[0]};
	my @weightz = @{$recup[1]};
	my $totcount = 0;
	foreach my $c (0..$#valz) {
		$totcount += ($valz[$c] * $weightz[$c]);
	}
	return ($totcount / (scalar(@valz)+1));
}
## Rectangular averaging
sub rec_avg {
	my @valz = shift;	# values
	my $totcount = 0;
	foreach (@valz) {
		$totcount += $_;
	}
	return ($totcount / scalar(@valz));
}


## ON YOUR MARKS... GET SET... GO !

## Splitting puppy...
## ... SYS fashion
# foreach my $chr (sort(keys(%{$chrom2chr{$opts{'sp'}}}))) {
# 	print "\n".$chr.' ...';
# 	qx{ grep -w -mmap ^$chr $opts{'i'} > $chr }
# }
# exit;

	
## Multithreaded mode
# my @clist = ('chr1', 'chr2', 'chr3', 'chr22', 'chrX', 'chrY');
my @clist = ();
my @olist = ();
if ($opts{'nt'} > 1) {
	
	use Parallel::ForkManager;
	
	if (!exists($opts{'chruse'})) {
		## Splitting the pup
		print "\nSplitting ".$opts{'i'}.' ...';
		my $firstline = 0;
		open PUP, $opts{'i'} or die $!;
		my $vchr = '';
		while (my $l = <PUP>) {
			my $cchr = ($l =~ /(^chr[0-9|X|Y]+)/)[0];
			next if ( (!$opts{'nc'}) and (!exists($chrom2chr{$opts{'sp'}}{$cchr})) );
# 			next if ( (!$opts{'nc'}) and (!exists($chrom2chr{$opts{'sp'}}{$cchr})) or ($cchr !~ /^chr20$/) );
			if ($cchr ne $vchr) {
				$vchr = $cchr;
				push @clist, $pupnam.'.'.$vchr;
# 				push @olist, $cchr.'.'.join('', 'hw', $opts{'hw'}, 's', $opts{'s'}, $smotrad{$opts{'m'}});
				print "\n".$vchr.' ...';
				if ($firstline == 0) {
					open COUT, ">".$pupnam.'.'.$vchr or die $!;
					$firstline++;
				}
				close COUT;
				open COUT, ">".$pupnam.'.'.$vchr or die $!;
			}
			print COUT $l;
		}
		close COUT;
		print "\n";
		
	}
	else {
# 		print "\nCHRLIST : ";
		my @xlist = @{$chrorder{$opts{'sp'}}};
		@xlist = map { $pupnam.'.'.$_ } @xlist;
		foreach my $cc (@xlist) {
			my $qreq = `ls $cc`;
			chomp $qreq;
			if ($qreq eq $cc) {
				push @clist, $qreq;
			}
		}
# 		@olist = map { $_.'.hw'.$opts{'hw'}.'.s'.$opts{'s'}.$smotrad{$opts{'m'}} } @clist;
	}
	@olist = map { $_.'.hw'.$opts{'hw'}.'s'.$opts{'s'}.$smotrad{$opts{'m'}} } @clist;
	print "\nCLIST : ".join(", ", @clist)."\n";
	print "\nOLIST : ".join(", ", @olist)."\n";
	
	## Running multithread (parallelfork)
	my $pm = new Parallel::ForkManager($opts{'nt'});
	
	## Roscoff tweak : putting chr17 at first to gain some time.
	@clist[0..12] = @clist[12,0..11];
	
	foreach my $cc (@clist) {
		$pm->start and next;
		&wmaker($cc);
		$pm->finish;
	}
	$pm->wait_all_children;
	
	open HOUT, ">header" or die $!;
	print HOUT join("\t", qw/Chr ChrN Start End Center Avg.Norm.Reads GC.num ATGC.num GC.rate/)."\n";
	close HOUT;
	
	## Merging results
	my $catcmd = 'cat header '.join(" ", @olist).' > '.$opts{'o'};
	print "\nCATCMD : ".$catcmd."\n";
	qx/$catcmd/;
	
	## Deleting temporary results
	## TEMPORARILY DEACTIVATED TO UNDERSTAND WHY WE HAVE 2 HEADERS IN THE FINAL MERGED OUTPUT
	my $rmcmd = 'rm '.join(" ", @olist);
	qx/$rmcmd/;
	
}
elsif ($opts{'nt'} == 1) {
	push @clist, $opts{'i'};
	&wmaker($opts{'i'});
}
print "\n";

###
sub wmaker {
	my $xchr = shift(@_);
	print "\n\tOpening ".$xchr." ...";
	open PUP, $xchr or return;

	my $ofile = '';
# 	if ($opts{'nt'} == 1) { $ofile = $opts{'o'}; } else { $ofile = $pupnam.'.'.$xchr.'.'.join('', 'hw', $opts{'hw'}, 's', $opts{'s'}, $smotrad{$opts{'m'}}); }
	if ($opts{'nt'} == 1) { $ofile = $opts{'o'}; } else { $ofile = $xchr.'.'.join('', 'hw', $opts{'hw'}, 's', $opts{'s'}, $smotrad{$opts{'m'}}); }
	
	open OUT, ">".$ofile or die $!;
	
	while (my $l  = <PUP>) {
		$l =~ s/\n//;
		$l =~ s/\r//;
		my @temp = split /\t/, $l;
		
		## Conditional filtering of unsupported chromosomes (chrM, randoms, ...)
		next if ( (!$opts{'nc'}) and (!$chrom2chr{$opts{'sp'}}{$temp[0]}) );
		
		## Conditional filtering of chrX
		next if ( ($opts{'noX'}) and ($temp[0] eq 'chrX') );
		
		## Conditional filtering of chrY
		next if ( ($opts{'noY'}) and ($temp[0] eq 'chrY') );
		
		$lc++;
		print "\r".'Processed '.sprintf("%.2e", $lc).' bases...' if ($lc % 1E+06 == 0);
		
		## CASE OF very first line;
		if ($ntf == 0) {
			&vload(@temp[0..3]);
			$chrf = $temp[0];
			$ntf = $temp[1];
			$nextstep = $ntf+$opts{'hw'};
			next;
		}
		
		## CASE OF chr change
		if ($temp[0] ne $chrf) {
			print "\n".'Changed '.$chrf.' to '.$temp[0]."\n";
			%vstor = ();		## reset vstor
			&vload(@temp[0..3]);
			$chrf = $temp[0];
			$ntf = $temp[1];
			$nextstep = $ntf+$opts{'hw'};
			next;
		}
		
		## If the current line is NOT the +1 of the preceading : we have a gap to fill...
		if ($temp[1] > $ntf+1) {
			while ($ntf < $temp[1]) {
				&vload($chrf, $ntf+1, 'N', 0);
				$ntf++;
			}
			&vload(@temp[0..3]);
			$ntf = $temp[1];
			next;
		}
		## General case
		&vload(@temp[0..3]);
		$ntf = $temp[1];
	}
	close OUT;
	
	## Deleting per-chr pileups, if requested
	if ( ($opts{'nt'} > 1) and (!$opts{'k'}) ) {
		qx/rm $xchr/;
		print "\nRemoved ".$xchr." ...";
	}
}

