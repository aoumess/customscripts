#!/usr/bin/perl
use strict;

my $version = '0.3 20120531';


## VERSION NOTES
##
## v0.3 20120531
##	. Added two Pfizer molecules, with several subversions, depending on the direction (sensitivity/resistance) and confidence of the targets.
##
## v0.2	20120203
##	. Added some Genentech molecules.
##
##
## NOTES DE VERSION (ORIGINAL GECHECO)
##
## v0.4b	. Correction des indices de colonnes de lecture du fichier CTD depuis changement de structure (PMIDs en colonne 8).
##		. Ajout de la g�n�ration d'un fichier texte annot� Mol�cule -> G�ne + NM (+PMID ?)
##
## v0.4		. Ajout des g�nes EGF et EREG sur demande de V.L. pour les mol�cules dont EGFR est cible.
##		. Ajout fichier de sortie tri� selon score.
##		. Ajout des g�nes suppl�mentaires trouv�s par Emilie HOLLVILLE

my $time = time;
my $db = '/mnt/db/';
my $proj = '/mnt/proj';

my %msbrand = (
'methotrexate' => [ 'Abitrexate', 'Antifolan', 'Arbitrexate', 'Emtexate', 'Folex', 'Ledertrexate', 'Metatrexan', 'Methotrate', 'Mexate', 'Rheumatrex', 'Trexall' ],
'pemetrexed' => [ 'Alimta' ],
'fludarabine' => [ 'Fludara', 'Fludura' ],
'fluorouracil' => [ '5 FU', 'Fluorouracil', 'Adrucil', 'Arumel', 'Carac', 'Carzonal', 'Effluderm', 'Efudex', 'Efudix', 'Efurix', 'FU', 'Fluoroblastin', 'Fluoroplex', 'Fluracil', 'Fluracilum', 'Fluri', 'Fluril', 'Fluro', 'Uracil', 'Ftoruracil', 'Kecimeton', 'Phthoruracil', 'Phtoruracil', 'Queroplex', 'Timazin', 'URF', 'Ulup' ],
'capecitabine' => [ 'Xeloda' ],
'gemcitabine' => [ 'DDFC', 'DFDC', 'GEO', 'Gemcin', 'Gemcitabina', 'Gemcitabine', 'HCl', 'Gemcitabine hydrochloride', 'Gemcitabinum', 'Gemtro', 'Gemzar' ],
'cyclophosphamide' => [ 'ASTA', 'Asta B 518', 'CP', 'CPA', 'CTX', 'CY', 'Clafen', 'Claphene', 'Cyclophosphamid', 'Cyclophosphamide Monohydrate', 'Cyclophosphamide Sterile', 'Cyclophosphamidum', 'Cyclophosphan', 'Cyclophosphane', 'Cyclophosphoramide', 'Cyclostin', 'Cyklofosfamid', 'Cytophosphan', 'Cytoxan', 'Cytoxan', 'Lyoph', 'EndoxanEndoxan', 'R', 'Endoxan-Asta', 'Endoxana', 'Endoxanal', 'Endoxane', 'Enduxan', 'Genoxal', 'Hexadrin Lyophilized', 'Cytoxan', 'Mitoxan', 'Neosar', 'Procytox', 'Rcra', 'Waste', 'Number', 'U058', 'Revimmune', 'Semdoxan', 'Sendoxan', 'Senduxan', 'Zyklophosphamid' ],
'ifosfamide' => [ 'Cyfos', 'Holoxan', '1000', 'IFEX', 'Ifex/Mesnex Kit', 'Ifosfamide/Mesna Kit', 'Isoendoxan', 'Mitoxana', 'Naxamide' ],
'melphalan' => [ 'Alkeran', 'L-PAM', 'L-Phenylalanine mustard', 'L-Sarcolysin', 'L-Sarcolysine', 'L-Sarkolysin', 'Levofalan', 'Melfalan', 'Mephalan', 'Phenylalanine mustard', 'Phenylalanine nitrogen mustard', 'Sarcolysine', 'Sarkolysin' ],
'carmustine' => [ 'Becenun', 'Bi CNU', 'BiCNU', 'Carmubris', 'Gliadel', 'Gliadel Wafer', 'Nitrumon' ],
'fotemustine' => [ 'Muphoran' ],
'carboplatin' => [ 'Paraplatin', 'Paraplatin-AQ' ],
'cisplatin' => [ 'Abiplatin', 'Biocisplatinum', 'Briplatin', 'Carboquone', 'Cis Pt II', 'Cismaplat', 'Cisplatine', 'Cisplatyl', 'Citoplationo', 'Lederplatin', 'Neoplatin', 'Plastin', 'Platamine', 'Platiblastin', 'Platidiam', 'Platinex', 'Platinol', 'Platinol-AQ', 'Platinoxan', 'Randa' ],
'oxaliplatin' => [ 'DACPLAT', 'Eloxatin', 'Elplat', 'Foloxatine', 'Transplatin' ],
'busulfan' => [ 'Busulfex', 'Citosulfan', 'Leucosulfan', 'Mablin', 'Mielevcin', 'Mielosan', 'Mielucin', 'Milecitan', 'Mileran', 'Misulban', 'Mitosan', 'Mitostan', 'Myeleukon', 'Myeloleukon', 'Myelosan', 'Mylecytan', 'Myleran', 'Myleran Tablets' ],
'procarbazine' => [ 'Matulane', 'Nathulane', 'Natulan', 'Natulan hydrochloride', 'Natulanar', 'Natunalar' ],
'dacarbazine' => [ 'Deticene' ],
'temozolomide' => [ 'Temodal', 'Temodar' ],
'thiotepa' => [ 'Thioplex', 'Thiotepa' ],
'ecteinascidin 743' => ['Trabectedin', 'ET-743', 'Yondelis'],
'docetaxel' => [ 'Taxotere' ],
'paclitaxel' => [ 'Epitaxol', 'LipoPac', 'Onxol', 'Paxceed', 'Paxene', 'Taxol', 'Taxol A', 'Vascular Wrap', 'Xorane' ],
'vinblastine' => [ 'Nincaluicolflastine', 'Rozevin', 'Velban', 'Velbe', 'Vinblastin', 'Vinblastina', 'Vinblastine Sulfate', 'Vinblastinum', 'Vincaleucoblastin', 'Vincaleucoblastine', 'Vincaleukoblastine', 'Vincoblastine' ],
'vincristine' => [ 'Marqibo', 'Onco TCS', 'Oncovin', 'Vincasar', 'Vincasar PFS', 'Vincrex', 'Vincristine Sulfate PFS', 'Vinkristin' ],
'vinflunine' => [  ],
'vindesine' => [ 'DAVA', 'Eldesine', 'Eldisine' ],
'vinorelbine' => [ 'Navelbine', 'Navelbine Base' ],
'epothilones' => [  ],
'doxorubicin' => [ 'ADM', 'Adriablastin', 'Adriamycin', 'Adriamycin PFS', 'Adriamycin RDF', 'Adriamycin Semiquinone', 'Adriblastin', 'Adriblastina', 'Caelyx', 'DM2', 'Doxil', 'Doxo', 'Myocet', 'RDF Rubex', 'Resmycin', 'Rubex' ],
'epirubicin' => [ 'Ellence', 'Epi-Dx', 'Epiadriamycin', 'Epidoxorubicin', 'Epirubicina', 'Epirubicine', 'Epirubicinum', 'IMI 28', 'Pharmorubicin Pfs', 'Pidorubicina', 'Pidorubicine', 'Pidorubicinum', 'Ridorubicin' ],
'mitoxantrone' => [ 'Mitox', 'Novantron', 'Novantrone' ],
'bleomycin' => [ 'Bleo', 'Bleonexane' ],
'mitomycin' => [ 'Ametycin', 'Ametycine', 'Mit-C', 'Mito-C', 'Mitocin-C', 'Mitomycin C', 'Mitomycin-C', 'Mitomycinum', 'Mitomycinum C', 'Mitomycyna C', 'Mitozytrex', 'Muamycin', 'Mutamycin', 'Mytomycin', 'Mytozytrex' ],
'hydroxyurea' => [ 'Biosupressin', 'Droxia', 'Hidrix', 'Hydrea', 'Hydreia', 'Hydura', 'Hydurea', 'Litaler', 'Litalir', 'Onco-Carbide', 'Oxyurea', 'Ureaphil' ],
'camptothecin' => [  ],
'topotecan' => [ 'Hycamptamine', 'Hycamptin', 'Hycamtin' ],
'irinotecan' => [ 'CP0', 'Camptosar', 'IRINOTECAN', 'CPT-11' ],
'etoposide' => [ 'Eposin', 'Etopophos', 'Lastet', 'Toposar', 'Vepesid', 'Vepesid J', 'Zuyeyidal' ],
'bexarotene' => [ 'Targret', 'Targretin', 'Targretin-gel', 'Targretyn', 'Targrexin' ],
'cetuximab' => [ 'Erbitux' ],
'trastuzumab' => [ 'Herceptin ' ],
'rituximab' => [ 'Rituxan ' ],
'tositumomab' => [ 'Bexxar' ],
'alemtuzumab' => [ 'Campath', 'MabCampath' ],
'bevacizumab' => [ 'Avastin' ],
'edrecolomab' => [ 'Panorex' ],
'gemtuzumab' => [ 'Mylotarg' ],
'axitinib' => [  ],
'bosutinib' => [  ],
'cediranib' => [ 'Recentin' ],
'dasatinib' => [ 'Sprycel' ],
'erlotinib' => [ 'Tarceva' ],
'gefitinib' => [ 'Iressa', 'Irressat', 'Tarceva' ],
'imatinib' => [ 'Gleevec', 'Glivec' ],
'lapatinib' => [ 'Tycerb', 'Tykerb' ],
'lestaurtinib' => [  ],
'nilotinib' => [ 'Ketek' ],
'semaxanib' => [  ],
'sorafenib' => [ 'Nexavar' ],
'sunitinib' => [ 'SU-11248', 'Sutent' ],
'vandetanib' => [ 'Zactima' ],
'temsirolimus' => [ 'Torisel' ],
'everolimus' => [ 'Certican' ],
'flavopiridol' => [ 'HMR-1275', 'Alvocidib' ],
'roscovitine' => [ 'Seliciclib ' ],
'aflibercept' => [ 'VEGF Trap' ],
'denileukin diftitox' => [ 'Ontak' ],
'arsenic trioxide' => [ 'Arsenite', 'Arsenolite', 'Arsodent', 'Claudelite', 'Claudetite', 'Trisenox' ],
'bortezomib' => [ 'Velcade' ],
'celecoxib' => [ 'Celebra', 'Celebrex' ],
'colchicine' => [ 'Col-probenecid', 'Colbenemid', 'Condylon', 'Proben-C' ],
'oblimersen' => [ 'Genasense', 'Augmerosen' ],
'tegafur' => [ 'UFT' ],
'tipifarnib' => [ 'Zarnestra' ],
'vorinostat' => [ 'Zolinza' ]
# , 'eggy' => [ 'aka "Eggy Bear"' ]
# , 'eggydn' => [ 'aka "Eggy Bear" DOWN' ]
,'GNT anti-EGFL7' => ['Genentech anti-EGFL7']
,'GNT anti-FGFR3' => ['Genentech anti-FGFR3']
,'GNT anti-HER3/EGFR' => ['Genentech anti-HER3/EGFR']
,'GNT GDC-0623' => ['Genentech MEK inhibitor GDC-0623']
,'GNT GDC-0973' => ['Genentech MEK inhibitor GDC-0973']
,'GNT GDC-0199' => ['Genentech BCL-2 inhibitor GDC-0199']
,'GNT GDC-0425' => ['Genentech CHEK1 inhibitor GDC-0425']
, 'PF1 all' => []
, 'PF1 all defined' => []
, 'PF1 sens' => []
, 'PF1 res' => []
, 'PF1 green sens' => []
, 'PF2 all' => ['']
, 'PF2 all defined' => ['']
, 'PF2 sens' => ['']
, 'PF2 res' => ['']
, 'PF2 green sens' => ['']
, 'PF2 green res' => ['']
, 'PF2 high' => ['']
, 'PF2 high sens' => ['']
, 'PF2 high res' => ['']
, 'PF2 interm sens' => ['']
);

my $ms = [
	[ 'Nucleotides',
		[ 'Nucleotides >> Antimetabolites',
			[ 'Nucleotides >> Antimetabolites >> Folic acid',
				[ 'methotrexate', ['DHFR', 'ALB'] ],
				[ 'pemetrexed', ['TYMS', 'DHFR', 'GART'] ]
			],
			[ 'Nucleotides >> Antimetabolites >> Purine',
				[ 'fludarabine', ['BCL2', 'RRM1', 'POLA1', 'STAT1', 'ADA'] ]
			],
			[ 'Nucleotides >> Antimetabolites >> Pyrimidine',
				[ 'fluorouracil', ['TYMS', 'UPRT', 'DPYD'] ],
				[ 'capecitabine', ['TYMS', 'DPYD'] ],
				[ 'gemcitabine', ['TYMS', 'RRM1', 'CMPK'] ]
			],
		]
	],
	[ 'DNA',
		[ 'DNA >> Alkylating agents',
			[ 'DNA >> Alkylating agents >> Nitrogen mustards',
				[ 'cyclophosphamide', [] ],
				[ 'ifosfamide', ['DNMT1'] ],
				[ 'melphalan', ['RALBP1'] ]
			],
			[ 'DNA >> Alkylating agents >> Nitrosoureas',
				[ 'carmustine', ['GSR'] ],
				[ 'fotemustine', ['TXNRD1'] ]
			],
			[ 'DNA >> Alkylating agents >> Platinum',
				[ 'carboplatin', ['ALB'] ],
				[ 'cisplatin', ['RALBP1'] ],
				[ 'oxaliplatin', [] ],
			],
			[ 'DNA >> Alkylating agents >> Alkyl sulfonates',
				[ 'busulfan', [] ]
			],
			[ 'DNA >> Alkylating agents >> Hydrazines',
				[ 'procarbazine', [] ]
			],
			[ 'DNA >> Alkylating agents >> Triazenes',
				[ 'dacarbazine', ['POLA2'] ],
				[ 'temozolomide', ['BNIP3', 'MDM2', 'AKT', 'FGF2'] ]
			],
			[ 'DNA >> Alkylating agents >> Aziridines',
				[ 'thiotepa', [] ]
			],
			[ 'DNA >> Alkylating agents >> Other',
				[ 'ecteinascidin 743', [ 'CCNA2', 'CCNB1', 'CCNB2', 'E2F1'] ]
			]
		],
		[ 'DNA >> Spindle poisons / Mitotic inhibitors',
			[ 'DNA >> Spindle poisons / Mitotic inhibitors >> Taxanes',
				[ 'docetaxel', ['TUBB1', 'BCL2', 'CCNB1'] ],
				[ 'paclitaxel', ['TUBB1', 'BCL2'] ]
			],
			[ 'DNA >> Spindle poisons / Mitotic inhibitors >> Vinca Alkaloids',
				[ 'vinblastine', ['TUBB2A', 'ABCB1', 'RALBP1'] ],
				[ 'vincristine', ['TUBB2A', 'RALBP1'] ],
				[ 'vinflunine',  ['TUBB1'] ],
				[ 'vindesine',  ['TUBB1'] ],
				[ 'vinorelbine', ['TUBB2A', 'RALBP1'] ]
			],
			[ 'DNA >> Spindle poisons / Mitotic inhibitors >> Other',
				[ 'epothilones', ['TUBB1', 'TUBB2A', 'TUBB4Q', 'TUBA3', 'TUBA8', 'TUBB2C', 'TUBA6', 'TUBA1', 'TUBB4', 'TUBB3', 'TUBA2'] ]
			]
		],
		[ 'DNA >> Cytotoxic / Antitumor antibiotics',
			[ 'DNA >> Cytotoxic / Antitumor antibiotics >> Anthracyclines',
				[ 'doxorubicin', ['TOP2A'] ],
				[ 'epirubicin', ['CHD1', 'TOP2A'] ]
			],
			[ 'DNA >> Cytotoxic / Antitumor antibiotics >> Anthracenediones',
				[ 'mitoxantrone', ['TOP2A', 'ABCG2'] ]
			],
			[ 'DNA >> Cytotoxic / Antitumor antibiotics >> Streptomyces',
				[ 'bleomycin', ['LIG3', 'LIG1'] ],
				[ 'mitomycin', ['TERT', 'GRP58'] ]
			],
			[ 'DNA >> Cytotoxic / Antitumor antibiotics >> Other',
				[ 'hydroxyurea', ['RRM1', 'RRM2'] ]
			]
		],
		[ 'DNA >> Topoisomerase inhibitors',
			[ 'DNA >> Topoisomerase inhibitors >> Camptotheca',
				[ 'camptothecin', ['TOP1'] ],
				[ 'topotecan', ['TOP1MT', 'TOP1', 'ABCG2'] ],
				[ 'irinotecan', ['TOP1MT', 'TOP1'] ]
			],
			[ 'DNA >> Topoisomerase inhibitors >> Podophyllum',
				[ 'etoposide', ['TOP2A', 'MAP2K7'] ]
			]
		],
		[ 'DNA >> Other',
			[ 'DNA >> Other >> All',
				[ 'bexarotene', ['RXRB'] ]
			]
		]
	],
	[ 'Cellular',
		[ 'Cellular >> CI monoclonal antibodies',
			[ 'Cellular >> CI monoclonal antibodies >> Receptor tyrosine kinase',
				[ 'cetuximab',  ['EGFR', 'EGF', 'EREG'] ],
				[ 'trastuzumab',  ['ERBB2', 'EGFR', 'EGF', 'EREG'] ]
			],
			[ 'Cellular >> CI monoclonal antibodies >> Anti-CD20',
				[ 'rituximab',  ['MS4A1'] ],
				[ 'tositumomab',  ['MS4A1'] ]
			],
			[ 'Cellular >> CI monoclonal antibodies >> Other',
				[ 'alemtuzumab',  ['CD52'] ],
				[ 'bevacizumab',  ['VEGFA'] ],
				[ 'edrecolomab',  ['TACSTD1'] ],
				[ 'gemtuzumab',  ['CD33'] ]
			]
		],
		[ 'Cellular >> Tyrosine kinase inhibitors',
			[ 'Cellular >> Tyrosine kinase inhibitors >> All',
				[ 'axitinib',  ['FLT1', 'KDR', 'FLT4', 'PDGFRA', 'PDGFRB', 'KIT'] ],
				[ 'bosutinib',  ['BCR', 'ABL1', 'SRC'] ],
				[ 'cediranib',  ['FLT1', 'FLT4'] ],
				[ 'dasatinib',  ['BCR', 'ABL1', 'SRC', 'PDGFRB', 'ABL2', 'KIT', 'FYN', 'YES1', 'EPHA2', 'LCK', 'STAT5B'] ],
				[ 'erlotinib', ['EGFR', 'EGF', 'EREG'] ],
				[ 'gefitinib', ['EGFR', 'EGF', 'EREG', 'PTEN', 'IGFBP3'] ],
				[ 'imatinib', ['ABL1', 'PDGFRB', 'KIT', 'PDGFRA', 'CSF1R', 'ABCB1', 'NTRK1', 'ABCG2', 'DDR1'] ],
				[ 'lapatinib', ['ERBB2', 'EGFR', 'EGF', 'EREG', 'PTEN', 'MCL1', 'PI3KCA'] ],
				[ 'lestaurtinib',  ['FLT3'] ],
				[ 'nilotinib',  ['BCR', 'ABL1', 'PDGFRA', 'PDGFRB', 'KIT'] ],
				[ 'semaxanib',  ['KDR'] ],
				[ 'sorafenib', ['FLT4', 'RAF1', 'FLT3', 'PDGFRB', 'KDR', 'KIT', 'BRAF', 'MAPK1', 'MAPK3', 'ERN1'] ],
				[ 'sunitinib',  ['KDR', 'PDGFRA', 'PDGFRB', 'KIT', 'FLT3', 'FLT4', 'FLT1', 'CSF1R', 'RET', 'BRAF', 'RAF1'] ],
				[ 'vandetanib',  ['KDR', 'EGFR', 'EGF', 'EREG'] ]
			]
		],
		[ 'Cellular >> mTOR inhibitors',
			[ 'Cellular >> mTOR inhibitors >> All',
				[ 'temsirolimus',  ['FRAP1'] ],
				[ 'everolimus', ['FRAP1', 'BCL2'] ]
			]
		],
		[ 'Cellular >> Cyclin-dependant kinase inhibitors',
			[ 'Cellular >> Cyclin-dependant kinase inhibitors >> All',
				[ 'flavopiridol', ['EGFR', 'EGF', 'EREG', 'CDK5', 'CDC2', 'CDK2', 'PYGM', 'CDK7', 'CDK9', 'CDK6', 'CDK4', 'CDK8'] ],
				[ 'roscovitine', ['CDK2'] ]
			]
		],
		[ 'Cellular >> Other',
			[ 'Cellular >> Other >> All',
				[ 'aflibercept',  ['VEGFA'] ],
				[ 'denileukin diftitox', ['IL2RA', 'IL2RB', 'IL2RG'] ]
			]
		]
	],
	[ 'Other / Ungrouped',
		[ 'Other / Ungrouped >> Other',
			[ 'Other / Ungrouped >> Other >> Other',
				[ 'arsenic trioxide', ['ATP2C1', 'PML', 'RARA', 'AKT1', 'IL6', 'MAPK1', 'ERGIC2', 'CCND1', 'ABCB1', 'JUN', 'MAPK3', 'IKBKB', 'ATP2C1'] ],
				[ 'bortezomib', ['PSMD1', 'PSMD2', 'PSMB1', 'PSMB5', 'PSMB2', 'HSP27'] ],
				[ 'celecoxib', ['PTGS2', 'PDPK1', 'CFLAR'] ],
				[ 'colchicine', ['TUBB1', 'TUBB2A', 'MEFV', 'ABCB1'] ],
				[ 'oblimersen', [] ],
				[ 'tegafur', [] ],
				[ 'tipifarnib', [] ],
				[ 'vorinostat', [ 'HDAC8', 'HDAC1', 'HDAC2', 'HDAC3', 'HDAC6'] ],
				[ 'GNT anti-EGFL7', ['EGFL7'] ],
				[ 'GNT anti-FGFR3', ['FGFR3'] ],
				[ 'GNT anti-HER3/EGFR', ['ERBB3', 'EGFR'] ],
				[ 'GNT GDC-0623', ['MEK'] ],
				[ 'GNT GDC-0973', ['MEK'] ],
				[ 'GNT GDC-0199', ['BCL2'] ],
				[ 'GNT GDC-0425', ['CHEK1'] ],
				[ 'PF1 all', ['HES3', 'HES4', 'HES6', 'HEY2', 'CTNNB1', 'DLL1', 'DLL3', 'DLL4', 'HES1', 'JAG1', 'JAG2', 'NOTCH1', 'NOTCH2', 'NOTCH3', 'NOTCH4', 'CDKN1A', 'CDKN2D', 'NUMB', 'FBXW7', 'HEYL'] ],
				[ 'PF1 all defined', ['HES3', 'HES4', 'HES6', 'HEY2', 'CTNNB1', 'DLL1', 'DLL3', 'DLL4', 'HES1', 'JAG1', 'JAG2', 'NOTCH1', 'NOTCH2', 'NOTCH3', 'NOTCH4', 'CDKN1A', 'CDKN2D', 'NUMB'] ],
				[ 'PF1 sens', ['HES3', 'HES4', 'HES6', 'HEY2', 'CTNNB1', 'DLL1', 'DLL3', 'DLL4', 'HES1', 'JAG1', 'JAG2', 'NOTCH1', 'NOTCH2', 'NOTCH3', 'NOTCH4'] ],
				[ 'PF1 res', ['CDKN1A', 'CDKN2D', 'NUMB'] ],
				[ 'PF1 green sens', ['HES3', 'HES4', 'HES6', 'HEY2'] ],
				[ 'PF2 all', ['BRAF', 'CCND1', 'CCND2', 'CCND3', 'CDK4', 'CDK6', 'CDKN2A', 'CDKN2B', 'CDKN2C', 'KRAS', 'RAF1', 'CDKN2D', 'MKI67', 'MYC', 'CCNE1', 'CDK2', 'RB1', 'SKP2', 'TP53', 'E2F1'] ],
				[ 'PF2 all defined', ['BRAF', 'CCND1', 'CCND2', 'CCND3', 'CDK4', 'CDK6', 'CDKN2A', 'CDKN2B', 'CDKN2C', 'KRAS', 'RAF1', 'CDKN2D', 'MKI67', 'MYC', 'CCNE1', 'CDK2', 'RB1', 'SKP2', 'TP53'] ],
				[ 'PF2 sens', ['BRAF', 'CCND1', 'CCND2', 'CCND3', 'CDK4', 'CDK6', 'CDKN2A', 'CDKN2B', 'CDKN2C', 'KRAS', 'RAF1', 'CDKN2D', 'MKI67', 'MYC'] ],
				[ 'PF2 green sens', ['BRAF', 'CCND1', 'CDK4', 'CDKN2A', 'CDKN2B', 'CDKN2C', 'RAF1'] ],
				[ 'PF2 green res', ['CCNE1', 'RB1'] ],
				[ 'PF2 high', ['BRAF', 'CCND1', 'CCND2', 'CCND3', 'CDK4', 'CDK6', 'CDKN2A', 'CDKN2B', 'CDKN2C', 'KRAS', 'RAF1', 'CCNE1', 'CDK2', 'RB1', 'SKP2', 'TP53'] ],
				[ 'PF2 high sens', ['BRAF', 'CCND1', 'CCND2', 'CCND3', 'CDK4', 'CDK6', 'CDKN2A', 'CDKN2B', 'CDKN2C', 'KRAS', 'RAF1'] ],
				[ 'PF2 high res', ['CCNE1', 'CDK2', 'RB1', 'SKP2', 'TP53'] ],
				[ 'PF2 interm sens', ['CDKN2D', 'MKI67', 'MYC'] ]
			]
		]
	]
];



my $mfc = 2;

if (scalar(@ARGV) == 0) {
	print '
GECHECO_limma v'.$version."
 for Gene Expression and CHEmicals COrrelation (limma version).

DESCRIPTION: Attempts to identify interesting cancer treatment
 chemicals from the coverage of their target genes found over-
 or under-expressed in a sample.

USAGE:
 gecheco [limmafiles] -mfc [value]

<limmafiles> One or many  data tables as given by Justine with columns :
 [ProbeName], [Symbol], [Fold.Change], [Intensity1], [Intensity2].

<-mfc> Minimal fold change (absolute value) to consider a GE probe.
       [".$mfc."]

VERSION NOTE :


";
exit;
}




## Gestion des arguments;
foreach (@ARGV) {
	chomp;
}

# my $infile = shift @ARGV;
# my $lmfile = shift @ARGV;
my @inflist = (<$ARGV[0]>);

print "\nSAMPLES : ".@inflist."\n";

## Initialisation des valeurs nulles pour les diff�rentes annotations, qui servent aussi de contr�le si jamais les fichiers source sont vides.
my $ctdctrl = '-';

## On importe les donn�es de tox CTD...
my $ctdfile = $db.'/ctd/CTD_chem_gene_ixns.tsv';
print "Importing CTD toxicology genes annotations ...\n";
my %toxgenhash=();
my %toxchemhash=();
my %toxpub=();
open CTDGEN, $ctdfile or die $!;
foreach (<CTDGEN>) {
	chomp;
	if ($_ !~ /^\#/) {
		my @temp = split /\t/, $_;
#		if ($temp[6] == 9606) {
		if ($temp[7] == 9606) {
			if (!exists $toxgenhash{$temp[3]}) {
				$toxgenhash{$temp[3]} = [ @temp[4,8] ];
			}
			else {
#				push @{$toxgenhash{$temp[3]}}, $temp[8];
				push @{$toxgenhash{$temp[3]}}, $temp[10];
			}
			push @{$toxchemhash{lc($temp[0])}}, $temp[3];
			
			if (exists $toxpub{lc($temp[0]).'_'.$temp[3]}) {
#				push @{$toxpub{lc($temp[0]).'_'.$temp[3]}},  $temp[8];
				push @{$toxpub{lc($temp[0]).'_'.$temp[3]}},  $temp[10];
			}
			else {
#				$toxpub{lc($temp[0]).'_'.$temp[3]} = [ $temp[8] ];
				$toxpub{lc($temp[0]).'_'.$temp[3]} = [ $temp[10] ];
			}
		}
	}
}
close CTDGEN;


my %toxgenhash_saved = %toxgenhash;

## Petit filtrage du hash CTD pour �liminer la redondance de mol�cules chimiques issues de publi diff�rentes...
print "\tfiltering data ...\n";
print "\t\tremoving redundancy for same interaction from different publications...\n";
print "\t\t\t".length(keys(%toxgenhash));
foreach my $k (keys(%toxgenhash)) {
	my %chemunik=();
	foreach my $c (1..$#{$toxgenhash{$k}}) {
		$chemunik{${$toxgenhash{$k}}[$c]}++;
	}
	$toxgenhash{$k} = [ ${$toxgenhash{$k}}[0], scalar(keys(%chemunik)) ];		## CTDid, Nb_CHEM;
}
print " to ".length(keys(%toxgenhash))."\n";

## Filtrage aussi du hash des mol�cules car le m�me g�nes peut y appara�tre plusieurs fois;
print "\t\tremoving redundancy for multiple occurrences of a gene for the same chemical...\n";
print "\t\t\t".length(keys(%toxchemhash));
foreach my $m (keys(%toxchemhash)) {
	my %genunik=();
	foreach my $gk (@{$toxchemhash{$m}}) {
		$genunik{$gk}++;
	}
	$toxchemhash{$m} = [ sort(keys(%genunik)) ];
}
print " to ".length(keys(%toxchemhash))."\n";

## Filtrage de toxpub pour �liminer les PMIDs pr�sents plusieurs fois pour un m�me couple mol�cule-g�ne;
print "\t\tremoving redundancy of pulication source for the same chemical-target interaction...\n";
print "\t\t\t".length(keys(%toxpub));
foreach my $pm (keys(%toxpub)) {
	my %pmidunik=();
	foreach my $pmid (@{$toxpub{$pm}}) {
		$pmidunik{$pmid}++;
	}
	$toxpub{$pm} = [ sort(keys(%pmidunik)) ];
}
print " to ".length(keys(%toxpub))."\n";

my @toto = keys(%toxpub);
# print "\nTOXPUB : \n".@toto."\n";
# print $toto[0]."\t".$toxpub{$toto[0]}."\n";

if (scalar(keys(%toxgenhash)) == 0) {
	print "\n\tWARNING : No CTD info banked ! Problem with the source file ?\n\n";
	$ctdctrl = '<B><I>E!</I></B>';
}



## On va plutot tenter ca depuis le fichier Locuslink, comme ca on aura la description.
my %nmz=();
open LL, $db.'/locuslink/Lkfunc' or die $!;
foreach (<LL>) {
	$_ =~ s/\n//;
	$_ =~ s/\r//;
	my @temp = split /\t/, $_;
	$nmz{$temp[1]} = [ @temp[2,7] ];
}
close LL;


############################################


## Préparation de la table de scores

my @dscorz=();

foreach my $l1 (0..$#{$ms}) {
	foreach my $l2 (1..$#{$ms->[$l1]}) {
		foreach my $l3 (1..$#{$ms->[$l1]->[$l2]}) {
			foreach my $l4 (1..$#{$ms->[$l1]->[$l2]->[$l3]}) {
				push @dscorz, [ uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]) ];
			}
		}
	}
}




## Calcul pour les échantillons
my @samples=();
foreach my $lmfile (@inflist) {
	
	my @tempy;
	chomp $lmfile;
	
	my @lmdat=();
	open LMF, $lmfile or die $!;
	foreach my $l (<LMF>) {
		chomp $l;
		if ($l !~ /^Probes/) {
			my @temp = split /\t/, $l;
			push @lmdat, [ @temp ];
		}
	}
	close LMF;
	
	## Définition du nom d'échantillon à partir du filename
# 	my $samplename = (split /normData\_bgSubstract\_/, $lmfile)[1];		# This filter is for the limma tables for lung Chemores from Justine
	my $samplename = $lmfile;
	$samplename =~ s/\.txt$//;
	push @samples, $samplename;
	
	print "Working with ".$samplename." ...\n";
	
	my %inh=();
	foreach my $ri (0..$#lmdat) {
		if ( (${$lmdat[$ri]}[2] ne 'NA') and (abs(${$lmdat[$ri]}[2]) > $mfc) ) {
			push @{$inh{${$lmdat[$ri]}[1]}}, ${$lmdat[$ri]}[2];
		}
	}

	print "\n\nINH: ".keys(%inh)."\n";

	## Classement des g�nes selon 3 statuts : que de la sur-exp, que de la sous-exp, ou les deux simultan�ment (car plusieurs probes!);
	my %UP=();
	my %DOWN=();
	my %MIX=();
	
	foreach my $k (keys(%inh)) {
		if (scalar(@{$inh{$k}}) == 1) {
			if (${$inh{$k}}[0] > 0) {
				$UP{$k} = [ @{$inh{$k}} ];
			}
			elsif (${$inh{$k}}[0] < 0) {
				$DOWN{$k} = [ @{$inh{$k}} ];
			}
			else {
				die "\nERROR : Gene ".$k." found with an unexpected fold-change value : ".${$inh{$k}}[0]."\n";
			}
		}
		else {
			my $cpos=0;
			my $cneg=0;
			foreach my $t (@{$inh{$k}}) {
				if ($t > 0) {
					$cpos++;
				}
				if ($t < 0) {
					$cneg++;
				}
			}
			if ( $cpos == scalar(@{$inh{$k}}) ) {
				$UP{$k} = [ @{$inh{$k}} ];
			}
			elsif ( $cneg == scalar(@{$inh{$k}}) ) {
				$DOWN{$k} = [ @{$inh{$k}} ];
			}
			else {
				$MIX{$k} = [ @{$inh{$k}} ];
			}
		}
	}

	undef %inh;

	print '

	UP =	'.keys(%UP).'
	DOWN =	'.keys(%DOWN).'
	MIX =	'.keys(%MIX).'

	';

# 	open TLIST, ">Tlist.txt" or die $!;

	open SCORCLASS, ">".$samplename."_mFC".$mfc."_SCOREsorted.chem.html" or die $!;

	open MOLG, ">".$samplename."_mFC".$mfc.".chem.html" or die $!;
	print MOLG '
	<HTML>
	<HEAD>
	<TITLE>'.$samplename.' ('.$time.') - Chemicals and altered target genes expression, at a minimum FC of '.$mfc.'.</TITLE>
	</HEAD>
	<BODY BGCOLOR=#EEEEFF>
	<TABLE BORDER=2 WIDTH=99% ALIGN=left>
	<TR ALIGN=center BGCOLOR=orange>
	<B><TH WIDTH=10%>Chemical</TH> <TH WIDTH=6%>Target Genes</TH> <TH WIDTH=30%>Target Genes List</TH> <TH WIDTH=6%>Found Targets</TH> <TH WIDTH=30%>Found Targets List (with fold-changes)</TH> <TH WIDTH=5%>Avg<BR>Abs(FC)</TH> <TH WIDTH 5%>Avg<BR>Abs(FC)<BR>UP-REG</TH> <TH WIDTH=5%> Score </TH></B>
	</TR>';


	print SCORCLASS '
	<HTML>
	<HEAD>
	<TITLE>'.$samplename.' ('.$time.') - Chemicals and altered target genes expression, at a minimum FC of '.$mfc.', ordered by Score.</TITLE>
	</HEAD>
	<BODY BGCOLOR=#EEEEFF>
	<TABLE BORDER=2 WIDTH=99% ALIGN=left>
	<TR ALIGN=center BGCOLOR=orange>
	<B><TH WIDTH=5%>#</TH> <TH WIDTH=10%>Chemical</TH> <TH WIDTH=6%>Target Genes</TH> <TH WIDTH=30%>Target Genes List</TH> <TH WIDTH=6%>Found Targets</TH> <TH WIDTH=30%>Found Targets List (with fold-changes)</TH> <TH WIDTH=5%>Avg<BR>Abs(FC)</TH> <TH WIDTH 5%>Avg<BR>Abs(FC)<BR>UP-REG</TH> <TH WIDTH=5%> Score </TH></B>
	</TR>
	';


	my @BIGGIE;

	foreach my $l1 (0..$#{$ms}) {
		print MOLG '
	<TR>
	<TD COLSPAN=8 ALIGN=left BGCOLOR=green><B>'.$ms->[$l1]->[0].'</B></TD>
	</TR>';
	
		foreach my $l2 (1..$#{$ms->[$l1]}) {
			print MOLG '
	<TR>
	<TD COLSPAN=8 ALIGN=left BGCOLOR=red><B>'.$ms->[$l1]->[$l2]->[0].'</B></TD>
	</TR>';
	
			foreach my $l3 (1..$#{$ms->[$l1]->[$l2]}) {
				print MOLG '
	<TR>
	<TD COLSPAN=8 ALIGN=left BGCOLOR=#7FFFD4><B>'.$ms->[$l1]->[$l2]->[$l3]->[0].'</B></TD>
	</TR>';
				foreach my $l4 (1..$#{$ms->[$l1]->[$l2]->[$l3]}) {
					
					my @entity=();
					
					print MOLG '
	<TR>
	<TD WIDTH=10% ALIGN=center><B>'.uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]).'</B>';
					
					my $tempy = '<TD WIDTH=10% ALIGN=center><B>'.uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]).'</B>';
	# 				push @entity, '<TR><TD WIDTH=10% ALIGN=center><B>'.uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]).'</B>';
					
					if (exists $msbrand{$ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]}) {
						if (scalar(@{$msbrand{$ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]}}) > 0) {
							print MOLG '<BR><I>('.join(", ", @{$msbrand{$ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]}}).')</I>';
							$tempy .= '<BR><I>('.join(", ", @{$msbrand{$ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]}}).')</I>';
						}
					}
					
					print MOLG '
	</TD> <TD WIDTH=6% ALIGN=center>';
					
					$tempy .= '</TD> <TD WIDTH=6% ALIGN=center>';
					push @entity, $tempy;
					
					my $usen='';
					my $dsen='';
					my $msen='';
					
					my @accgl=();
					
					@accgl = @{$ms->[$l1]->[$l2]->[$l3]->[$l4]->[1]};
					
					if (exists $toxchemhash{lc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0])}) {
						push @accgl,  @{$toxchemhash{lc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0])}};
					}
					
					## Elimination des redondances de genes entre les deux sources (CTD et DrugBank)
					my %gfilt=();
					foreach my $g (@accgl) {
						$gfilt{$g} = 1;
					}
					@accgl = sort {$a cmp $b} keys(%gfilt);
					
					print MOLG scalar(@accgl).'</TD> <TD WIDTH=30%>';
					push @entity, scalar(@accgl).'</TD> <TD WIDTH=30%>';
					
					foreach my $gn (@accgl) {
						my $bzz ='';
						if (exists $toxpub{lc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]).'_'.$gn}) {
							$bzz = join(", ", @{$toxpub{lc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]).'_'.$gn}});
# 							if (exists $nmz{$gn}) {
# 								print TLIST join("\t", uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]), @{$nmz{$gn}}, $gn, $bzz)."\n";
# 							}
# 							else {
# 								print TLIST join("\t", uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]), '-', '-', $gn, $bzz)."\n";
# 							}
						}
# 						else {
# 							if (exists $nmz{$gn}) {
# 								print TLIST join("\t", uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]), @{$nmz{$gn}}, $gn)."\n";
# 							}
# 							else {
# 								print TLIST join("\t", uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]), '-', '-', $gn)."\n";
# 							}
# 						}
					}
					
					my @avgfcu=();
					my @avgfcd=();
					my @avgfcm=();
					
					my ($tgxc, $tgxf, $ugxf, $ugxc, $dgxc, $mgxc) = (0, 0, 0, 0, 0, 0);
					
					if (scalar(@accgl) > 0) {
						
						print MOLG join(' ', @accgl).'</TD> <TD WIDTH=6% ALIGN=center>';
						push @entity, join(' ', @accgl).'</TD> <TD WIDTH=6% ALIGN=center>';
						
						foreach my $tgx (@accgl) {
							if (exists $UP{$tgx}) {
								$tgxc++;
								$ugxc++;
							}
							if (exists $DOWN{$tgx}) {
								$tgxc++;
								$dgxc++;
							}
							if (exists $MIX{$tgx}) {
								$tgxc++;
								$mgxc++;
							}
						}
						if ($tgxc > 0) {
							
							$tgxf = $tgxc/scalar(@accgl)*100;
							$ugxf = $ugxc/scalar(@accgl)*100;
							
							if ($mgxc > 0) {
								
								print MOLG '<B>'.$tgxc.'<BR>(<FONT COLOR=red>'.$ugxc.'</FONT>+<FONT COLOR=green>'.$dgxc.'</FONT>+<FONT COLOR=grey>'.$mgxc.'</FONT>)</B><BR>('.sprintf("%.1f", $tgxf).'%)</TD> <TD WIDTH=39%>';
								push @entity, '<B>'.$tgxc.'<BR>(<FONT COLOR=red>'.$ugxc.'</FONT>+<FONT COLOR=green>'.$dgxc.'</FONT>+<FONT COLOR=grey>'.$mgxc.'</FONT>)</B><BR>('.sprintf("%.1f", $tgxf).'%)</TD> <TD WIDTH=39%>';
							}
							else {
								print MOLG '<B>'.$tgxc.'<BR>(<FONT COLOR=red>'.$ugxc.'</FONT>+<FONT COLOR=green>'.$dgxc.'</FONT>)</B><BR>('.sprintf("%.1f", $tgxf).'%)</TD> <TD WIDTH=39%>';
								push @entity, '<B>'.$tgxc.'<BR>(<FONT COLOR=red>'.$ugxc.'</FONT>+<FONT COLOR=green>'.$dgxc.'</FONT>)</B><BR>('.sprintf("%.1f", $tgxf).'%)</TD> <TD WIDTH=39%>';
							}
						}
						else {
							print MOLG '-</TD> <TD WIDTH=30% ALIGN=center>-</TD> <TD WIDTH=5% ALIGN=center>-</TD> <TD WIDTH=5% ALIGN=center>-</TD> <TD WIDTH=5% ALIGN=center>-</TD></TR>';
							push @entity, '-</TD> <TD WIDTH=30% ALIGN=center>-</TD> <TD WIDTH=5% ALIGN=center>-</TD> <TD WIDTH=5% ALIGN=center>-</TD> <TD WIDTH=5% ALIGN=center>-</TD> </TR>';
							push @tempy, 0;
							next;
						}
						
						foreach my $tg (0..$#accgl) {
							if (exists $UP{$accgl[$tg]}) {
								$usen .= '<FONT COLOR=red>'.$accgl[$tg].'</FONT> (';
								
								my @cfcavgtmp=();
								
								foreach my $cfc (0..$#{$UP{$accgl[$tg]}}) {
									$usen .= '<FONT COLOR=red>';
									
									push @cfcavgtmp, abs(${$UP{$accgl[$tg]}}[$cfc]);
									
									if (${$UP{$accgl[$tg]}}[$cfc] > 5) {
										$usen .= '<B>';
									}
									if (${$UP{$accgl[$tg]}}[$cfc] > 100) {
										$usen .= '<U>';
									}
									
									$usen .= sprintf("%.2f", ${$UP{$accgl[$tg]}}[$cfc]);
									
									if (${$UP{$accgl[$tg]}}[$cfc] > 100) {
										$usen .= '</U>';
									}
									if (${$UP{$accgl[$tg]}}[$cfc] > 5) {
										$usen .= '</B>';
									}
									$usen .= '</FONT>';
									
									if ($cfc == $#{$UP{$accgl[$tg]}}) {
										$usen .= ') ';
									}
									else {
										$usen .= ', ';
									}
								}
								
								push @avgfcu, avg(@cfcavgtmp);
							}
							if (exists $DOWN{$accgl[$tg]}) {
								$dsen .= '<FONT COLOR=green>'.$accgl[$tg].'</FONT> (';
								
								my @cfcavgtmp=();
								
								foreach my $cfc (0..$#{$DOWN{$accgl[$tg]}}) {
									$dsen .= '<FONT COLOR=green>';
									
									push @cfcavgtmp, abs(${$DOWN{$accgl[$tg]}}[$cfc]);
									
									if (${$DOWN{$accgl[$tg]}}[$cfc] < -5) {
										$dsen .= '<B>';
									}
									if (${$DOWN{$accgl[$tg]}}[$cfc] < -100) {
										$dsen .= '<U>';
									}
									
									$dsen .= sprintf("%.2f", ${$DOWN{$accgl[$tg]}}[$cfc]);
									
									if (${$DOWN{$accgl[$tg]}}[$cfc] < -100) {
										$dsen .= '</U>';
									}
									if (${$DOWN{$accgl[$tg]}}[$cfc] < -5) {
										$dsen .= '</B>';
									}
									$dsen .= '</FONT>';
									
									if ($cfc == $#{$DOWN{$accgl[$tg]}}) {
										$dsen .= ') ';
									}
									else {
										$dsen .= ', ';
									}
								}
								
								push @avgfcd, avg(@cfcavgtmp);
							}
							if (exists $MIX{$accgl[$tg]}) {
								$msen .= '<FONT COLOR=grey><I>'.$accgl[$tg].'</I></FONT> (';
								
								my @cfcavgtmp=();
								
								foreach my $cfc (0..$#{$MIX{$accgl[$tg]}}) {
									
									push @cfcavgtmp, abs(${$MIX{$accgl[$tg]}}[$cfc]);
									
									$msen .= '<FONT COLOR=grey>';
									if (abs(${$MIX{$accgl[$tg]}}[$cfc]) > 5) {
										$msen .= '<B>';
									}
									if (abs(${$MIX{$accgl[$tg]}}[$cfc]) > 100) {
										$msen .= '<U>';
									}
									
									$msen .= sprintf("%.2f", ${$MIX{$accgl[$tg]}}[$cfc]);
									
									if (abs(${$MIX{$accgl[$tg]}}[$cfc]) > 100) {
										$msen .= '</U>';
									}
									if (abs(${$MIX{$accgl[$tg]}}[$cfc]) > 5) {
										$msen .= '</B>';
									}
									$msen .= '</FONT>';
									
									if ($cfc == $#{$MIX{$accgl[$tg]}}) {
										$msen .= ') ';
									}
									else {
										$msen .= ', ';
									}
								}
								
								push @avgfcm, avg(@cfcavgtmp);
							}
						}
					}
					my $finsen = join('<BR><BR>', $usen, $dsen, $msen);
					$finsen =~ s/(^(<BR>)+|(<BR>)+$)//g;
					
					print MOLG $finsen;
					
					push @entity, $finsen;
					
					my $scory = 0;
					if ($ugxc != 0) {
	# 					$scory = avg(@avgfcu)*$ugxf/$ugxc;		# 1
	# 					$scory = avg(@avgfcu)*$ugxf/$tgxc;		# 2
	# 					$scory = avg(@avgfcu)*$ugxf/scalar(@accgl);	# 3
						$scory = avg(@avgfcu)*$ugxf			# 4
					}
					
					push @tempy, $scory;
					
					print MOLG '</TD> <TD WIDTH=5% ALIGN=center>'.sprintf("%.2f", avg(@avgfcu, @avgfcd, @avgfcm)).'</TD> <TD WIDTH=5% ALIGN=center><FONT COLOR=red>'.sprintf("%.2f", avg(@avgfcu)).'</FONT></TD> <TD WIDTH=5% ALIGN=center><B>'.sprintf("%i", $scory).'</B></TD>';
	# 				print MOLG '</TD> <TD WIDTH=6% ALIGN=center><B>'.sprintf("%.2f", 'bouh').'</TD>';
					push @entity, '</TD> <TD WIDTH=5% ALIGN=center>'.sprintf("%.2f", avg(@avgfcu, @avgfcd, @avgfcm)).'</TD> <TD WIDTH=5% ALIGN=center><FONT COLOR=red>'.sprintf("%.2f", avg(@avgfcu)).'</FONT></TD> <TD WIDTH=5% ALIGN=center><B>'.sprintf("%i", $scory).'</B></TD>';
					push @entity, $scory;
					
					push @BIGGIE, [ @entity ];
	# 				print "\tENTITY: ".(@entity)."\n";
				}
				print MOLG '
	</TR>';
			}
		}
	}
	close MOLG;

# 	close TLIST;

	@BIGGIE = sort { ${$b}[6] <=> ${$a}[6] } @BIGGIE;
	print "BIGGIE : ".scalar(@BIGGIE)."\n";
	print "BIGGIE1 : ".scalar(@{$BIGGIE[0]})."\n";
	foreach my $l (0..$#BIGGIE) {
		print SCORCLASS '<TR> <TD WIDTH=5% ALIGN=center><B>'.($l+1).'</B></TD>'.join('', @{$BIGGIE[$l]}[0..5] ).'</TR>'."\n";
	}
	close SCORCLASS;
	
	print "TEMPY : ".@tempy."\n";
	
	foreach my $p (0..$#tempy) {
		push @{$dscorz[$p]}, $tempy[$p];
	}
}


open SCO, ">scorz.txt" or die $!;
print SCO join("\t", 'Molecule', join("\t", @samples))."\n";
foreach my $n (0..$#dscorz) {
	print SCO join("\t", @{$dscorz[$n]})."\n";
}
close SCO;


## Ranking

# my @drankz=();
# foreach my $l1 (0..$#{$ms}) {
# 	foreach my $l2 (1..$#{$ms->[$l1]}) {
# 		foreach my $l3 (1..$#{$ms->[$l1]->[$l2]}) {
# 			foreach my $l4 (1..$#{$ms->[$l1]->[$l2]->[$l3]}) {
# 				push @drankz, [ uc($ms->[$l1]->[$l2]->[$l3]->[$l4]->[0]) ];
# 			}
# 		}
# 	}
# }

foreach my $p (1..$#{$dscorz[0]}) {
	my @curranks=();
	my %rankash=();
	## Listing scores
	foreach my $m (0..$#dscorz) {
		push @curranks, ${$dscorz[$m]}[$p];
	}
	## Ranking scores;
	@curranks = sort { $b <=> $a } @curranks;
	## Creating hash of ranks;
	foreach my $k (0..$#curranks) {
		if (!exists $rankash{$curranks[$k]}) {
			$rankash{$curranks[$k]} = $k+1;
		}
	}
	foreach my $m (0..$#dscorz) {
		${$dscorz[$m]}[$p] = $rankash{${$dscorz[$m]}[$p]};
	}
}

open RANK, ">rankz.txt" or die $!;
print RANK join("\t", 'Molecule', join("\t", @samples))."\n";
foreach my $n (0..$#dscorz) {
	print RANK join("\t", @{$dscorz[$n]})."\n";
}
close RANK;



## Functions

sub sum {
	my @temp = @_;
	my $count=0;
	foreach my $c (@temp) {
		$count += $c;
	}
	return $count;
}


sub avg {
	my @temp = @_;
	if (scalar(@temp) == 0) {
		return 0;
	}
	return sum(@temp) / scalar(@temp);
}
















