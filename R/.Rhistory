, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 4 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
out_name <- paste0(in_dir, paste(c('/Heatmap', categs, paste0('Top', n_top), paste0(s_dist, '.', g_dist), toupper(signed), if(z_clust) 'Z'), collapse = '_'), '.pdf')
pdf(file = out_name, width = 28/cm(1), height = 35/cm(1))
ComplexHeatmap::draw(CHres)
dev.off()
signed = 'pos'
## Getting top features
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- pos_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(rownames(d_tmp))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
## Heatmap
### Plot range
# myRamp <- if (z_clust) circlize::colorRamp2(c(-1, 0, 1), heatmap.palette) else circlize::colorRamp2(c(-2, 0, 2), heatmap.palette)
myRamp <- circlize::colorRamp2(c(-1, 0, 1), heatmap.palette)
### Z-scoring
z_mat <- t(scale(x = t(exp_top), center = TRUE, scale = TRUE))
# z_mat <- scale(x = exp_top, center = TRUE, scale = TRUE)
run_mat <- if(z_clust) z_mat else exp_top
### Top annotation
set.seed(my_seed)
ha1 = ComplexHeatmap::HeatmapAnnotation(df = annot_df[,c('Tumor_Type'), drop = FALSE])
### Clustering samples
hc.s <- hclust(amap::Dist(x = t(run_mat), method = s_dist), method = 'ward.D')
### Clustering genes
hc.g <- hclust(amap::Dist(x = run_mat, method = g_dist), method = 'ward.D')
## Heatmap
CHres <- ComplexHeatmap::Heatmap(
matrix = z_mat
, top_annotation = ha1
, cluster_columns = hc.s
, cluster_rows = hc.g
, name = 'Z'
, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 4 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
out_name <- paste0(in_dir, paste(c('/Heatmap', categs, paste0('Top', n_top), paste0(s_dist, '.', g_dist), toupper(signed), if(z_clust) 'Z'), collapse = '_'), '.pdf')
pdf(file = out_name, width = 28/cm(1), height = 35/cm(1))
ComplexHeatmap::draw(CHres)
dev.off()
signed = 'posneg'
## Getting top features
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- pos_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(rownames(d_tmp))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
## Getting top features
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- pos_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(rownames(d_tmp))
})
str(top_feats_list)
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
top_features
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
unique(top_features)
table(top_features %in% rownames(exp_mat))
top_features[!(top_features %in% rownames(exp_mat)]
top_features[!(top_features %in% rownames(exp_mat))]
dim(exp_mat)
str(sort(rownames(exp_mat)))
sort(rownames(exp_mat))[1:100]
sort(rownames(exp_mat))[1:200]
sort(rownames(exp_mat))[1:400]
top_features[!(top_features %in% rownames(exp_mat))]
top_feats_list
top_features <- sort(unique(unlist(top_feats_list, use.names = FALSE)))
top_features
sort(top_features)
str(d_tmp)
## Getting top features
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- pos_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(unique(d_tmp$Symbol))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list, use.names = FALSE)))
str(top_features)
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- neg_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(unique(d_tmp$Symbol))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list, use.names = FALSE)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
## Heatmap
### Plot range
# myRamp <- if (z_clust) circlize::colorRamp2(c(-1, 0, 1), heatmap.palette) else circlize::colorRamp2(c(-2, 0, 2), heatmap.palette)
myRamp <- circlize::colorRamp2(c(-1, 0, 1), heatmap.palette)
### Z-scoring
z_mat <- t(scale(x = t(exp_top), center = TRUE, scale = TRUE))
# z_mat <- scale(x = exp_top, center = TRUE, scale = TRUE)
run_mat <- if(z_clust) z_mat else exp_top
### Top annotation
set.seed(my_seed)
ha1 = ComplexHeatmap::HeatmapAnnotation(df = annot_df[,c('Tumor_Type'), drop = FALSE])
### Clustering samples
hc.s <- hclust(amap::Dist(x = t(run_mat), method = s_dist), method = 'ward.D')
### Clustering genes
hc.g <- hclust(amap::Dist(x = run_mat, method = g_dist), method = 'ward.D')
## Heatmap
CHres <- ComplexHeatmap::Heatmap(
matrix = z_mat
, top_annotation = ha1
, cluster_columns = hc.s
, cluster_rows = hc.g
, name = 'Z'
, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 4 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
out_name <- paste0(in_dir, paste(c('/Heatmap', categs, paste0('Top', n_top), paste0(s_dist, '.', g_dist), toupper(signed), if(z_clust) 'Z'), collapse = '_'), '.pdf')
pdf(file = out_name, width = 28/cm(1), height = 35/cm(1))
ComplexHeatmap::draw(CHres)
dev.off()
g_dist = 'pearson'
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- neg_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(unique(d_tmp$Symbol))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list, use.names = FALSE)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
## Heatmap
### Plot range
# myRamp <- if (z_clust) circlize::colorRamp2(c(-1, 0, 1), heatmap.palette) else circlize::colorRamp2(c(-2, 0, 2), heatmap.palette)
myRamp <- circlize::colorRamp2(c(-1, 0, 1), heatmap.palette)
### Z-scoring
z_mat <- t(scale(x = t(exp_top), center = TRUE, scale = TRUE))
# z_mat <- scale(x = exp_top, center = TRUE, scale = TRUE)
run_mat <- if(z_clust) z_mat else exp_top
### Top annotation
set.seed(my_seed)
ha1 = ComplexHeatmap::HeatmapAnnotation(df = annot_df[,c('Tumor_Type'), drop = FALSE])
### Clustering samples
hc.s <- hclust(amap::Dist(x = t(run_mat), method = s_dist), method = 'ward.D')
### Clustering genes
hc.g <- hclust(amap::Dist(x = run_mat, method = g_dist), method = 'ward.D')
## Heatmap
CHres <- ComplexHeatmap::Heatmap(
matrix = z_mat
, top_annotation = ha1
, cluster_columns = hc.s
, cluster_rows = hc.g
, name = 'Z'
, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 4 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
out_name <- paste0(in_dir, paste(c('/Heatmap', categs, paste0('Top', n_top), paste0(s_dist, '.', g_dist), toupper(signed), if(z_clust) 'Z'), collapse = '_'), '.pdf')
pdf(file = out_name, width = 28/cm(1), height = 35/cm(1))
ComplexHeatmap::draw(CHres)
dev.off()
g_dist = 'abspearson'
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- neg_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(unique(d_tmp$Symbol))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list, use.names = FALSE)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
## Heatmap
### Plot range
# myRamp <- if (z_clust) circlize::colorRamp2(c(-1, 0, 1), heatmap.palette) else circlize::colorRamp2(c(-2, 0, 2), heatmap.palette)
myRamp <- circlize::colorRamp2(c(-1, 0, 1), heatmap.palette)
### Z-scoring
z_mat <- t(scale(x = t(exp_top), center = TRUE, scale = TRUE))
# z_mat <- scale(x = exp_top, center = TRUE, scale = TRUE)
run_mat <- if(z_clust) z_mat else exp_top
### Top annotation
set.seed(my_seed)
ha1 = ComplexHeatmap::HeatmapAnnotation(df = annot_df[,c('Tumor_Type'), drop = FALSE])
### Clustering samples
hc.s <- hclust(amap::Dist(x = t(run_mat), method = s_dist), method = 'ward.D')
### Clustering genes
hc.g <- hclust(amap::Dist(x = run_mat, method = g_dist), method = 'ward.D')
## Heatmap
CHres <- ComplexHeatmap::Heatmap(
matrix = z_mat
, top_annotation = ha1
, cluster_columns = hc.s
, cluster_rows = hc.g
, name = 'Z'
, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 4 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
out_name <- paste0(in_dir, paste(c('/Heatmap', categs, paste0('Top', n_top), paste0(s_dist, '.', g_dist), toupper(signed), if(z_clust) 'Z'), collapse = '_'), '.pdf')
pdf(file = out_name, width = 28/cm(1), height = 35/cm(1))
ComplexHeatmap::draw(CHres)
dev.off()
g_dist = 'abscorrelation'
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- neg_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(unique(d_tmp$Symbol))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list, use.names = FALSE)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
## Heatmap
### Plot range
# myRamp <- if (z_clust) circlize::colorRamp2(c(-1, 0, 1), heatmap.palette) else circlize::colorRamp2(c(-2, 0, 2), heatmap.palette)
myRamp <- circlize::colorRamp2(c(-1, 0, 1), heatmap.palette)
### Z-scoring
z_mat <- t(scale(x = t(exp_top), center = TRUE, scale = TRUE))
# z_mat <- scale(x = exp_top, center = TRUE, scale = TRUE)
run_mat <- if(z_clust) z_mat else exp_top
### Top annotation
set.seed(my_seed)
ha1 = ComplexHeatmap::HeatmapAnnotation(df = annot_df[,c('Tumor_Type'), drop = FALSE])
### Clustering samples
hc.s <- hclust(amap::Dist(x = t(run_mat), method = s_dist), method = 'ward.D')
### Clustering genes
hc.g <- hclust(amap::Dist(x = run_mat, method = g_dist), method = 'ward.D')
## Heatmap
CHres <- ComplexHeatmap::Heatmap(
matrix = z_mat
, top_annotation = ha1
, cluster_columns = hc.s
, cluster_rows = hc.g
, name = 'Z'
, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 4 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
out_name <- paste0(in_dir, paste(c('/Heatmap', categs, paste0('Top', n_top), paste0(s_dist, '.', g_dist), toupper(signed), if(z_clust) 'Z'), collapse = '_'), '.pdf')
pdf(file = out_name, width = 28/cm(1), height = 35/cm(1))
ComplexHeatmap::draw(CHres)
dev.off()
g_dist = 'pearson'
CHres <- ComplexHeatmap::Heatmap(
matrix = z_mat
, top_annotation = ha1
, cluster_columns = hc.s
, cluster_rows = hc.g
, name = 'Z'
, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 6 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
ComplexHeatmap::draw(CHres)
g_dist
signed
## Getting top features
top_feats_list <- lapply(seq_along(deares_data_list), function(d) {
d_tmp <- deares_data_list[[d]][deares_data_list[[d]]$padj < adjp_cut & !is.na(deares_data_list[[d]]$padj),]
d_tmp <- d_tmp[order(abs(d_tmp[[top_metric]])),]
## POSNEG case
if(signed == 'posneg') {
halfn <- ceiling(n_top/2)
pos_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
if(nrow(pos_tmp) > halfn) pos_tmp <- pos_tmp[1:halfn,]
neg_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
if(nrow(neg_tmp) > halfn) neg_tmp <- neg_tmp[1:halfn,]
d_tmp <- rbind(pos_tmp, neg_tmp)
} else {
if(signed == 'pos') {
d_tmp <- d_tmp[d_tmp[[top_metric]] > 0,]
} else if(signed == 'neg') {
d_tmp <- d_tmp[d_tmp[[top_metric]] < 0,]
}
if(nrow(d_tmp) > n_top) d_tmp <- d_tmp[1:n_top,]
}
return(unique(d_tmp$Symbol))
})
names(top_feats_list) <- names(deares_data_list)
str(top_feats_list)
top_features <- sort(unique(unlist(top_feats_list, use.names = FALSE)))
str(top_features)
## Restrict the expression matrix
exp_top <- exp_mat[top_features,]
## Heatmap
### Plot range
# myRamp <- if (z_clust) circlize::colorRamp2(c(-1, 0, 1), heatmap.palette) else circlize::colorRamp2(c(-2, 0, 2), heatmap.palette)
myRamp <- circlize::colorRamp2(c(-1, 0, 1), heatmap.palette)
### Z-scoring
z_mat <- t(scale(x = t(exp_top), center = TRUE, scale = TRUE))
# z_mat <- scale(x = exp_top, center = TRUE, scale = TRUE)
run_mat <- if(z_clust) z_mat else exp_top
### Top annotation
set.seed(my_seed)
ha1 = ComplexHeatmap::HeatmapAnnotation(df = annot_df[,c('Tumor_Type'), drop = FALSE])
### Clustering samples
hc.s <- hclust(amap::Dist(x = t(run_mat), method = s_dist), method = 'ward.D')
### Clustering genes
hc.g <- hclust(amap::Dist(x = run_mat, method = g_dist), method = 'ward.D')
## Heatmap
CHres <- ComplexHeatmap::Heatmap(
matrix = z_mat
, top_annotation = ha1
, cluster_columns = hc.s
, cluster_rows = hc.g
, name = 'Z'
, col = myRamp
, row_dend_width = grid::unit(2, "cm")
, column_dend_height = grid::unit(2, "cm")
, row_split = if(z_clust) 6 else NULL
# , row_split = 4
, column_split = 4
, column_title = NULL
, row_title = NULL
)
out_name <- paste0(in_dir, paste(c('/Heatmap', categs, paste0('Top', n_top), paste0(s_dist, '.', g_dist), toupper(signed), if(z_clust) 'Z'), collapse = '_'), '.pdf')
pdf(file = out_name, width = 28/cm(1), height = 35/cm(1))
ComplexHeatmap::draw(CHres)
dev.off()
